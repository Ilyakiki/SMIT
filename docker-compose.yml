version: "3.8"

services:
  test:
    build:
      context: .
      target: test
    container_name: fastapi_tests
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - fastapi-network
    entrypoint: ["pytest", "test_app.py", "--asyncio-mode=auto"]

  web:
    build:
      context: .
      target: production
    container_name: fastapi_app
    ports:
      - "8000:8000"
    depends_on:
      test:
        condition: service_completed_successfully
    env_file:
      - .env
    restart: "always"
    networks:
      - fastapi-network

  db:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: "always"
    ports:
      - "127.0.0.1:5555:${DB_PORT}"
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    networks:
      - fastapi-network
    volumes:
      - ./db:/var/lib/postgresql/data
      - ./init_scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${DB_PORT} -d ${DB_NAME} -U ${DB_USER}"]
      interval: 5s
      retries: 3
      timeout: 5s
networks:
  fastapi-network:
    driver: bridge
